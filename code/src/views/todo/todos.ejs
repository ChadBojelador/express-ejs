<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <%- include("../partials/head") %>
  <title>My Todos</title>
</head>
<body>
  <h1>Todo List</h1>

  <form id="todoForm" onsubmit="return handleSubmitForm(event)">
    <label for="title">Title</label>
    <input type="text" id="title" required style="margin-bottom: 12px;" />

    <label for="description">Description</label>
    <input type="text" id="description" required style="margin-bottom: 12px;" />

    <label for="status">Status</label>
    <select id="status" style="margin-bottom: 12px;">
      <option value="Pending">Pending</option>
      <option value="In Progress">In Progress</option>
      <option value="Done">Done</option>
    </select>

    <input type="submit" value="Add Todo" style="margin-bottom: 12px;" />
    <input type="hidden" id="todo-id" />
    <p id="message"></p>
  </form>
  
  <button onclick="deleteAllTodos()">Delete All</button>

  <table border="1" cellpadding="10" cellspacing="0" style="width: 100%; text-align: left;">
    <thead>
      <tr>
        <th>Title</th>
        <th>Description</th>
        <th>Status</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <% data.forEach(todo => { %>
        <tr data-id="<%= todo.id %>">
          <td onclick="makeEditable(this, 'title')">
            <span><%= todo.title %></span>
          </td>
          <td onclick="makeEditable(this, 'description')">
            <span><%= todo.description %></span>
          </td>
          <td>
            <select onchange="markAsDirty(this)">
              <option value="Pending" <%= todo.status === "Pending" ? "selected" : "" %>>Pending</option>
              <option value="In Progress" <%= todo.status === "In Progress" ? "selected" : "" %>>In Progress</option>
              <option value="Done" <%= todo.status === "Done" ? "selected" : "" %>>Done</option>
            </select>
          </td>
          <td>
            <button onclick="updateRow(this)">Update</button>
            <button onclick="deleteTodo('<%= todo.id %>')">Delete</button>
          </td>
        </tr>
      <% }) %>
    </tbody>
  </table>

  <script>
    async function handleSubmitForm(e) {
      e.preventDefault();

      const title = document.getElementById("title").value.trim();
      const description = document.getElementById("description").value.trim();
      const status = document.getElementById("status").value;
      const message = document.getElementById("message");

      try {
        const response = await fetch("/api/todos/add", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ title, description, status }),
        });

        if (!response.ok) throw new Error("Failed to add");

        message.style.color = "green";
        message.textContent = "Todo added successfully!";
        setTimeout(() => window.location.reload(), 1000);
      } catch (error) {
        console.error(error);
        message.style.color = "red";
        message.textContent = "Failed to add todo.";
      }

      return false;
    }

    function makeEditable(cell, field) {
      if (cell.querySelector('input')) return;

      const span = cell.querySelector('span');
      const currentValue = span.textContent;

      const input = document.createElement('input');
      input.type = 'text';
      input.value = currentValue;
      input.style.width = '90%';

      cell.innerHTML = '';
      cell.appendChild(input);
      input.focus();

      input.addEventListener('blur', () => {
        cell.innerHTML = `<span>${input.value}</span>`;
        markAsDirty(cell.closest('tr'));
      });

      input.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
          e.preventDefault();
          input.blur();
        } else if (e.key === 'Escape') {
          cell.innerHTML = `<span>${currentValue}</span>`;
        }
      });
    }

    function markAsDirty(rowOrSelect) {
      const row = rowOrSelect.closest('tr');
      row.dataset.dirty = 'true';
    }

    async function updateRow(button) {
      const row = button.closest('tr');
      const id = row.dataset.id;

      const title = row.cells[0].querySelector('span')?.textContent.trim() || '';
      const description = row.cells[1].querySelector('span')?.textContent.trim() || '';
      const status = row.cells[2].querySelector('select').value;

      try {
        const response = await fetch(`/api/todos/update/${id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ title, description, status })
        });

        if (!response.ok) throw new Error('Failed to update');

        alert('Todo updated successfully.');
        row.dataset.dirty = '';
      } catch (error) {
        console.error(error);
        alert('Update failed.');
      }
    }

    async function deleteTodo(id) {
      if (!confirm("Are you sure you want to delete this todo?")) return;

      try {
        const response = await fetch(`/api/todos/delete/${id}`, {
          method: "DELETE",
        });

        if (response.ok) {
          window.location.reload();
        } else {
          throw new Error("Delete failed");
        }
      } catch (error) {
        console.error(error);
        alert("Failed to delete todo.");
      }
    }

    async function deleteAllTodos() {
      if (!confirm("Are you sure you want to delete all todos?")) return;

      try {
        const response = await fetch("/api/todos/delete", {
          method: "DELETE",
        });

        if (!response.ok) throw new Error("Delete all failed");

        alert("All todos deleted!");
        window.location.reload();
      } catch (error) {
        console.error(error);
        alert("Failed to delete all todos.");
      }
    }
  </script>
</body>
</html>