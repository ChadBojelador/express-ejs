<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <%- include("../partials/head") %>
  <title>My Todos</title>
</head>
<body>
  <h1>Todo List</h1>

  <form id="todoForm" onsubmit="return handleSubmitForm(event)">
    <label for="title">Title</label>
    <input type="text" id="title" required style="margin-bottom: 12px;" />
    <label for="description">Description</label>
    <input type="text" id="description" required style="margin-bottom: 12px;" />
    <label for="status">Status</label>
    <select id="status" style="margin-bottom: 12px;">
      <option value="Pending">Pending</option>
      <option value="In Progress">In Progress</option>
      <option value="Done">Done</option>
    </select>
    <input type="submit" value="Add Todo" style="margin-bottom: 12px;" />
    <input type="hidden" id="todo-id" />
    <p id="message"></p>
  </form>

  <button onclick="deleteAllTodos()">Delete All</button>
  <button onclick="handleLogout()" style="float: right; margin: 12px;">Logout</button>

  <table id="todoTable" border="1" cellpadding="10" cellspacing="0" style="width: 100%; text-align: left;">
    <thead>
      <tr>
        <th>Title</th>
        <th>Description</th>
        <th>Status</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody id="todoTableBody">
      <% data.forEach(todo => { %>
        <tr data-id="<%= todo.id %>">
          <td onclick="makeEditable(this, 'title')"><span><%= todo.title %></span></td>
          <td onclick="makeEditable(this, 'description')"><span><%= todo.description %></span></td>
          <td>
            <select onchange="markAsDirty(this)">
              <option value="Pending" <%= todo.status === "Pending" ? "selected" : "" %>>Pending</option>
              <option value="In Progress" <%= todo.status === "In Progress" ? "selected" : "" %>>In Progress</option>
              <option value="Done" <%= todo.status === "Done" ? "selected" : "" %>>Done</option>
            </select>
          </td>
          <td>
            <button onclick="updateRow(this)">Update</button>
            <button onclick="deleteTodo('<%= todo.id %>')">Delete</button>
          </td>
        </tr>
      <% }) %>
    </tbody>
  </table>

  <script>
  const message = document.getElementById("message");

  async function handleSubmitForm(e) {
    e.preventDefault();
    const title = document.getElementById("title").value.trim();
    const description = document.getElementById("description").value.trim();
    const status = document.getElementById("status").value;

    try {
      const res = await fetch("/api/todos/add", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ title, description, status }),
      });
      const result = await res.json();

      if (!res.ok) throw new Error(result.message || "Unknown error");

      message.style.color = "green";
      message.textContent = result.message || "Todo added successfully!";
      addRowToTable(result.data);

      document.getElementById("title").value = "";
      document.getElementById("description").value = "";
      document.getElementById("status").value = "Pending";

      setTimeout(() => (message.textContent = ""), 1500);
    } catch (err) {
      message.style.color = "red";
      message.textContent = err.message || "Failed to add todo.";
    }
  }

  function addRowToTable(todo) {
    const row = document.createElement("tr");
    row.setAttribute("data-id", todo.id);
    row.innerHTML = `
      <td onclick="makeEditable(this, 'title')"><span>${todo.title}</span></td>
      <td onclick="makeEditable(this, 'description')"><span>${todo.description}</span></td>
      <td>
        <select onchange="markAsDirty(this)">
          <option value="Pending" ${todo.status === "Pending" ? "selected" : ""}>Pending</option>
          <option value="In Progress" ${todo.status === "In Progress" ? "selected" : ""}>In Progress</option>
          <option value="Done" ${todo.status === "Done" ? "selected" : ""}>Done</option>
        </select>
      </td>
      <td>
        <button onclick="updateRow(this)">Update</button>
        <button onclick="deleteTodo('${todo.id}')">Delete</button>
      </td>`;
    document.getElementById("todoTableBody").appendChild(row);
  }

  function makeEditable(cell, field) {
    if (cell.querySelector('input')) return;
    const span = cell.querySelector('span');
    const val = span.textContent;
    const input = document.createElement('input');
    input.type = 'text';
    input.value = val;
    input.style.width = '90%';
    cell.innerHTML = '';
    cell.appendChild(input);
    input.focus();

    input.addEventListener('blur', () => {
      cell.innerHTML = `<span>${input.value}</span>`;
      markAsDirty(cell.closest('tr'));
    });

    input.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        e.preventDefault();
        input.blur();
      }
      if (e.key === 'Escape') {
        cell.innerHTML = `<span>${val}</span>`;
      }
    });
  }

  function markAsDirty(rowOrSelect) {
    rowOrSelect.closest('tr').dataset.dirty = 'true';
  }

  async function updateRow(button) {
    const row = button.closest('tr');
    const id = row.dataset.id;
    const title = row.cells[0].querySelector('span')?.textContent.trim() || '';
    const description = row.cells[1].querySelector('span')?.textContent.trim() || '';
    const status = row.cells[2].querySelector('select').value;

    try {
      const res = await fetch(`/api/todos/update/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ title, description, status }),
      });
      const result = await res.json();

      if (!res.ok) throw new Error(result.message);

      alert(result.message);
      row.dataset.dirty = '';
    } catch (err) {
      alert(err.message);
    }
  }

  async function deleteTodo(id) {
    if (!confirm("Are you sure you want to delete this todo?")) return;
    try {
      const res = await fetch(`/api/todos/delete/${id}`, { method: "DELETE" });
      const result = await res.json();
      if (!res.ok) throw new Error(result.message);

      document.querySelector(`tr[data-id="${id}"]`).remove();
      alert(result.message);
    } catch (err) {
      alert(err.message);
    }
  }

  async function deleteAllTodos() {
    if (!confirm("Are you sure you want to delete all todos?")) return;
    try {
      const res = await fetch("/api/todos/delete", { method: "DELETE" });
      const result = await res.json();
      if (!res.ok) throw new Error(result.message);

      alert(result.message);
      document.getElementById("todoTableBody").innerHTML = "";
    } catch (err) {
      alert(err.message);
    }
  }

  async function handleLogout() {
    try {
      const res = await fetch("/api/auth/logout", { method: "POST" });
      const result = await res.json();
      if (!res.ok) throw new Error(result.message);

      window.location.href = "/";
    } catch (err) {
      alert(err.message);
    }
  }
  </script>
</body>
</html>
